Choix de la stategie de Mapping Objet relationnel:

Oeuvre -> Peinture / Sculpture / Photographie

Nous avons choisi de prendre la stratÃ©gie SINGLE TABLE du fait que les insertions et requÃªtes de selection ne sont pas couteuses. Quelques attributs 
des classes filles (Photographie, peinture, ..) sont rajoutÃ©s dans la classe mÃ¨re (ils sont peu nombreux), quelques attributs sont specifiques Ã  une classe fille ce qui
implique qu'ils ne seront pas renseignes pour certaines classes concrÃ¨tes.

Nous n'avons pas choisi la methode TABLE_PER_CLASS car cela impliquerait de devoir dupliquer les informations de la classe mere dans chacune de ses classes concrÃ¨tes.
Au niveau des requÃ¨tes de selection sur la classe mÃ¨re cela les alourdit en creant des jointures pour acceder aux classes concrÃ¨tes (ex : le conservateur veut connaitre
toutes les oeuvres d'une collection ==> Comme on a persiste que les classes concretes, on est obligÃ© de faire une jointure entre toutes les classes concrÃ¨tes).

Nous n'avons pas egalement choisi la methode JOINED bien qu'elle proche du modele objet car cela alourdit les insertions en base (2 requetes par insertion, insÃ©rer 
d'abord les information dans la classe mere puis dans la classe fille ) et les requÃ¨tes.



Personne -> Libraire / Conservateur / artiste

Nous avons choisi la stategie TABLE PER CLASS afin de rentrer en base les classes concretes. En effet nous n'aurons pas besoin d'effectuer de requÃ¨tes (jointures)
 pour recolter des informations sur un ensemble de personnes.

----------------------------------------------------------------------------------------------------------------------------------------------------------

CARDINALITES

Oeuvre et reproduction :
==> OneToOne unidirectionnel
Une reproduction connait l'oeuvre qu'elle reproduit, tandis qu'une oeuvre n'est pas consciente de ses reproductions.
Une oeuvre peut avoir plusieurs reproductions, une reproduction ne reproduit qu'une oeuvre.


Collection et oeuvre :
==> n:m ManyToMany unidirectionnel
Une oeuvre ne sait pas qu'elle est dans une collection, une collection connait toutes les oeuvres qu'elle contient.
Une collection possede une ou plusieurs oeuvres, une oeuvre peut appartenir a plusieurs collections.


Oeuvre et artiste :
=> 1:n bidirectionnel
Une oeuvre sait par quel artiste elle a ete faite, un artiste a conscience de ses oeuvre (liste d'oeuvres).
Une oeuvre possede une cle etrangere sur Artiste (JoinColumn)
Une oeuvre est faite par un artiste, un artiste peut faire plusieurs oeuvres.


L'ajout d'une oeuvre ajoute en cascade l'artiste qui l'a cree.



---------------------------------------------------------------------------------------------------------------------------------------------------

Methode de récupération des entites :






----------------------------------------------------------------------------------------------------------------------------------------------------------

DEPOT HIBERNATE :
http://mvnrepository.com/artifact/org.hibernate/hibernate-core/4.1.7.Final

 ! : trouver des tuto a jour (Hibernate 4) car les precedents n'utilisent pas d'annotations mais plutot des fichiers de mapping.
 

 
 Pour persister les donnees, on peut soit utiliser les EntityManager (avec persist()), soit utiliser une session (qui est specifique Ã  hibernate) et faire un save().
 Il peut etre judicieux d'utiliser l'API JPA (standard JEE ==> augmente la portabilite du projet. ex : si on change de framework de persistence, on n'a pas de changement
 a  faire) plutot que celle d'hibernate (A nous de choisir).
 
---------
 Citation de Stackoverflow :
 The EntityManager invokes the hibernate session under the hood. And if you need some specific features that are not available in the EntityManager,
  you can obtain the session by calling:Session session = entityManager.unwrap(Session.class);
---------

au lieu de creer une classe HibernateUtil nous avons cree la classe JPAUtil

Pour configurer Hibernate il est possible de le faire via le fichier hibernate.cfg.xml ou persistence.xml => nous avons choisi persistence.xml
etant donné que nous utilisons l'API de JPA


 ! : a la version de dependance hibernate-entitymanager, celle qu'on avait : Hibernate EntityManager 3.3.0.GA n'est pas une implementation de
 JPA 2.0  (alors que dans notre persistence.xml on a :  http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0") et ne supporte 
 donc pas javax.persistence.*
 Nous avons donc pris la version : 3.5.1-Final et ca marche (plus d'erreur : the user must supply a jdbc connection).


----------------------------------------------------------------------------------------------------------------------------------------------------------

Utilisation d'Enums pour Support / Realisation / Etat / Materiaux
=> Faire constructeur avec param et par defaut, ajouter l'annotation @Enumerated(EnumType.STRING) au dessus des champs dans les classes 
les utilisant

---------------------------------------------------------------------------------------------------------------------------------------------------------- 

Tests DAO

!: Attention, il faut set tous les attribut d'un objet pour qu'il soit persiste dans la base (sauf s'ils ont l'annotation @Column(nullable=true)).
Passer par les setter ou le constructeur avec parametre.

Il etait prevu d'utiliser une base de donnees embarquee type h2db comme en TD mais en la mettant en place nous avons eu quelques problemes.
Alors que les donnees sont correctement persistees en base avec MySQL, un grand nombre d'erreurs apparaissent avec H2DB. Il a donc ete
decide d'utiliser MySQL pour les tests => Une base de donnees de test a ete cree pour l'occasion "museeTest", en plus de la base "musee".
Pour cela un fichier persitence.xml existe dans src/main/resources et src/test/resources afin de configurer les 2 bases (elles sont similaires,
seul le nom change).

---------------------------------------------------------------------------------------------------------------------------------------------------------- 
LOGGERS

dans le fichier log4j.properties, le niveau des log d'hibernate a ete reduit a ERROR pour ne pas polluer l'affichage :
log4j.logger.org.hibernate = ERROR

Nos LOGs faits dans nos classes ont le niveau ALL afin de ne rien rater.

Ainsi lorsque l'on lance mvn clean install, on a les erreurs d'hibernate / nos logs / les requetes SQL grace à <property name="hibernate.show_sql" value="true" />


---------------------------------------------------------------------------------------------------------------------------------------------------------- 

JAX RS : http://docs.jboss.org/resteasy/docs/1.0.2.GA/userguide/html_single/index.html
Fournit une API Java pour les web services REST, en utilisant le protocole HTTP. Resteasy est une implémentation de JAX-RS portable, qui peut 
tourner dans n'importe quel conteneur de servlet. 

Resteasy permet de (de)serialiser les classes annotées avec JAXB



------------------------------------------------------------------------------------------------------------------------------------------------
C3p0

Connection pool is good for performance, as it prevents Java application create a connection each time when interact with database 
and minimizes the cost of opening and closing connections.

Hibernate comes with internal connection pool, but not suitable for production use. Here is how to integrate 
third party connection pool – C3P0, with Hibernate.
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-c3p0</artifactId>
		<version>3.6.3.Final</version>
	</dependency>
	

Quand l'application est deployee, l'entityManagerFactory est cree (un seul pour l'application entiere), et ferme quand l'application est "detruite".
Chaque thread qui appelle JPAUtil pour avoir un nouvel entityManager en a un nouveau qui dure le temps de la requete HTTP :
Un entityManager par requete HTTP. Quand la requete est terminee, l'entityManager est ferme autimatiquement. 

C'est la qu'intervient JNDI, une datasource.
Autoriser les pool de connexion permet de reutiliser les connexions à notre base de données plutôt que d'avoir à en recréer une a chaque fois.
Efficace en terme d'allocation memoire et pour la vitesse d'execution des requetes sur la base (a chaque fois qu'on a besoin de faire une operation
sur un objet en base : create/update/delete, on a besoin d'un entity manager).
Nous utilisons c3p0 pour le pool de connexion et JNDI pour l'annuaire de ressources.
==> Lorsque l'entityManager appelle close(), il est retourné au pool pour être réutilisé.


Datasource JNDI (package javax.sql) :
voir http://java.developpez.com/faq/jdbc/?page=dataSources#poolconnexion

voir dans web.xml :
	<resource-ref>
		<description>DB Connection</description>
		<res-ref-name>jdbc/MySQL</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>				
		<res-sharing-scope>Shareable</res-sharing-scope>
	</resource-ref>

Il s'agit d'une interface représentant une source de données. C'est une simple fabrique de connexion vers une base de données physique.
Une datasource est appelée via JNDI.
Dans Jetty-xml on informe Jetty qu'on va utiliser un annuaire JNDI :
	<New class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<Set name="driverClass">com.mysql.jdbc.Driver</Set>
		<Set name="User">root</Set>
		<Set name="Password"></Set>
		<Set name="jdbcUrl">jdbc:mysql://localhost:3306/musee</Set>
	</New>
==> on lui spécifie l'adresse de notre base de donnée et l'utilisateur + driver MySQL



FILTER (JPAFilter):
Chaque requete HTTP est interceptée. C'est comme ça qu'on voit créer un entityManager pour chaque requete HTTP. C'est dans la fonction
"init" de JPAFilter qu'un entityManagerFactory est cree pour l'unite de persistence "Musee" (comme defini dans le persistence.xml).

Ensuite la methode doFilter retourne des entityManagers.


==>Probleme :
Alors qu'avant (quand on appelait notre DAO.createObject qui lui meme faisait appel a createEntityManager) un entityManagerFactory + un entityManager
etaient crees a chaque operation sur nos objets, on n'avait pas de probleme (meme si ce n'etait pas du tout propre de faire comme ça) avec notre
base de prod et base de test.
Maintenant c'est dans la classe JPAFilter qu'on distribue des entityManagers pour traiter une requete HTTP => Tout va bien pour notre base de prod,
avec un client on peut envoyer une requete HTPP POST/GET et elle est interceptee.

Pour la base de test, on n'utilise pas de client et du coup on ne passe pas dans la classe JPAFilter et aucun entityManager n'est cree.
Quand on appelle dans les tests DAO.createObjet, l'entityManager en vide et une exception en resulte.
Il faudrait 2 traitements a differencier dans GenericDAO : pour la base de prod on a besoin de JPAUtil, pour la base de tests on a juste besoin
d'un EntityManagerFactory et quelques entityManagers ==> On n'aura pas plusieurs utilisateurs sur la base de tests.


JPAUtil : ThreadLocal :
Stocke des donnees dans le thread courant afin de les recuperer plus tard dans une autre fonction par exemple.
ex :
		public void doFilter(ServletRequest request,
			ServletResponse response, FilterChain chain)
					throws IOException, ServletException {
	
			..
			JPAUtil.ENTITY_MANAGERS.set(em);
			..
			JPAUtil.ENTITY_MANAGERS.remove();
			..




	









